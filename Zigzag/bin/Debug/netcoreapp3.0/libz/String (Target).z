to_string(n) {
    number = string('')
    sign = string('')

    if n < 0 {
        sign = string('-')
        n = -n
    }

    loop() {
        remainder = n % 10
        n /= 10

        number = number.insert(0, 48 + remainder)

        if n == 0 {
            => sign.combine(number)
        }
    }
}

to_number(text) {
    length = text.length()

    if length == 0 {
        => 0
    }

    buffer = text.data()
    sign = 1

    if buffer[0] == 45 {
        sign = -sign
    }

    i = 0
    n = 0

    loop (i < length) {
        a = buffer[i] -> num - 48
        n = n * 10 + a
        ++i
    }

    => n * sign
}

length_of(text) {
    i = 0

    loop {
        if text[i++] == 0 => i
    }
}

string {
    text

    string(source) {
        text = source
    }

    combine(other) {
        a = length()
        b = other.length() + 1

        memory = allocate(a + b)

        copy(text, a, memory)
        offset_copy(other.text, b, memory, a)

        => string(memory)
    }

    append(character) {
        length = length()

        # Allocate memory for new string
        memory = allocate(length + 2)

        # Copy this string to the new string
        copy(text, length, memory)
        
        # Add the given character to the end of the new string
        memory[length] = character
        memory[length + 1] = 0

        => string(memory)
    }

    insert(index, character) {
        # Calculate the current string length
        length = length()

        # Reserve memory: Current memory + Character + Terminator
        memory = allocate(length + 2)

        # Copy the first segment before the index to the buffer
        copy(text, index, memory)
        # Copy the second segment after the index to the buffer, leaving space for the character
        offset_copy(text, length - index, memory, index + 1)

        # Insert the character and the terminator
        memory[index] = character
        memory[length + 1] = 0

        # Create a new string from the buffer
        => string(memory)
    }
    
    data() {
        => text
    }

    length() {
        i = 0
        
        loop() {
            if text[i++] == 0 => i
        }
    }
}