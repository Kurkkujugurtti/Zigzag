type List {
    elements: link
    capacity: num
    batch: num
    position: num

    size => position

    List(count) {
        elements = allocate(count * 4) -> num
        capacity = count
        batch = capacity
        position = 0
    }

    List() {
		elements = 0
		capacity = 0
		batch = 0
		position = 0
    }

    private grow() {
        if batch < 0 {
            memory = allocate(capacity * 2)
            copy(elements, capacity, memory)
            free(elements)

            elements = memory
            capacity = capacity * 2
        } 
        else {
            memory = allocate(capacity + batch)
            copy(elements, capacity, memory)
            free(elements)

            elements = memory
            capacity = capacity + batch
        }
    }

    add(element) {
        if position == capacity {
            grow()
        }

        elements[position++] = element
    }

    take() => elements[--position]

    at(i) => elements[i]
    operator[] (i) => elements[i]
    
    operator+ (other) {
        result = List(size + other.size)

        loop (i = 0, i < size, i++) {
            result.add(elements[i])
        }

        loop (i = 0, i < other.size, i++) {
            result.add(other.elements[i])
        }

        => result
    }
}