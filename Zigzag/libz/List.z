List { T } {
	private elements: num
	private capacity: num
	private position: num

	init(count: num) {
		if count == 0 {
			count = 1
		}

		elements = num[count]
		capacity = count
		position = 0
	}

	init() {
		elements = num[1]
		capacity = 1
		position = 0
	}

	private grow() {
		memory = num[capacity * 2]
		copy(elements, capacity, memory)
		deallocate(elements, capacity)

		elements = memory
		capacity = capacity * 2
	}

	add(element: T) {
		if position == capacity {
			grow()
		}

		elements[position] = element
		position += 1
	}

	take() {
		position -= 1
		element = elements[position]
		=> element as T
	}
	
	set(i: num, value: T) {
	    elements[i] = value
	}

	get(i: num) {
		=> elements[i] as T
	}
	
	assign_plus(other: List(T)) {
	    
	}

	size() {
		=> position
	}
}